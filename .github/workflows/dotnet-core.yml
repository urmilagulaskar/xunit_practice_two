name: .NET Core
env:
  APPLICATION_NAME: demo-app
  test_result: ""
on:
  push:
    branches: [ master, develop ]
    tags: 
      - "v*"
  pull_request:
    branches: [ master ]

jobs:
  send_notification:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: MS team integration for notification
        uses: ./webhook
        with:
          webhook: ${{ secrets.MSTEAMS_WEBHOOK }}
          message: "First test message"  
          title: 'Success notification'        
          
  build_test_version:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v1
    
    - name: Fetch all history for all tag and branches
      run: git fetch --prune 

      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
    - run: |
        dotnet --version
                       
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      id: run_tests
      if: ${{ success() }}
      run: dotnet test --no-restore --verbosity normal
    - name: Print result
      run: |
        echo "${{ steps.run_tests.output }}"

  
  sonar_scanner:
    needs: [build_test_version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code for scanning
        uses: actions/checkout@v1

      - name: Checking MSBuild
        run: |
          dotnet tool install --global dotnet-sonarscanner 
          dotnet sonarscanner begin /k:"common-project" /o:${{ secrets.SONAR_ORG_KEY }} /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login=${{ secrets.COMMON_PROJECT }}
          dotnet build ./xunit_practice_two.sln
          dotnet sonarscanner end /d:sonar.login=${{ secrets.COMMON_PROJECT }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install git version
        uses: gittools/actions/gitversion/setup@v0.9.2
        with:
         versionSpec: '5.2.x'

      - name: Use GitVersion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.9.2
      - run: |
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
      - name: Build the docker image
        run: docker build . --file Dockerfile --tag dotnet-dockerimage:${{ steps.gitversion.outputs.ShortSha }}
      - name: Scan image
        uses: sysdiglabs/scan-action@v1
        with:
          image-tag: "dotnet-dockerimage:${{ steps.gitversion.outputs.ShortSha }}"
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_TOKEN }}
      - name: Push Docker images
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: urmilag/bulletinboard
          tags: dotnet-dockerimage-${{ steps.gitversion.outputs.ShortSha }}
       # Print artifacts
      - name: Print artifacts
        run: |
          echo "Deploy Package : ${{ env.APPLICATION_NAME }}"
